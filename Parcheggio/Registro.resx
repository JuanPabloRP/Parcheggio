<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.BackgroundImage" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>